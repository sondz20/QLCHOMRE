const { exec } = require('child_process');
const Client = require('ssh2-sftp-client');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Interface cho input t·ª´ user
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function askQuestion(question) {
    return new Promise((resolve) => {
        rl.question(question, (answer) => {
            resolve(answer);
        });
    });
}

console.log('üöÄ CHROME MANAGER - AUTO BUILD & UPLOAD');
console.log('=======================================');
console.log('');

console.log('üî¢ B∆Ø·ªöC 0: VERSION BUMP & GIT SYNC');
console.log('==================================');

// ƒê·ªçc version hi·ªán t·∫°i
let packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
const currentVersion = packageJson.version;

console.log(`üìã Current Version: ${currentVersion}`);

// T·ª± ƒë·ªông t√≠nh to√°n version m·ªõi
const versionParts = currentVersion.split('.');
const suggestedPatch = versionParts.slice();
suggestedPatch[2] = (parseInt(suggestedPatch[2]) + 1).toString();

const suggestedMinor = versionParts.slice();
suggestedMinor[1] = (parseInt(suggestedMinor[1]) + 1).toString();
suggestedMinor[2] = '0';

const suggestedMajor = versionParts.slice();
suggestedMajor[0] = (parseInt(suggestedMajor[0]) + 1).toString();
suggestedMajor[1] = '0';
suggestedMajor[2] = '0';

console.log('');
console.log('üéØ Ch·ªçn lo·∫°i version bump:');
console.log(`   1. Patch (${suggestedPatch.join('.')}) - Bug fixes`);
console.log(`   2. Minor (${suggestedMinor.join('.')}) - New features`);
console.log(`   3. Major (${suggestedMajor.join('.')}) - Breaking changes`);
console.log(`   4. Custom - Nh·∫≠p version t√πy ch·ªânh`);
console.log(`   5. Skip - Gi·ªØ nguy√™n version hi·ªán t·∫°i`);

async function getNewVersion() {
    const choice = await askQuestion('\nüî¢ Ch·ªçn (1-5): ');
    
    switch(choice.trim()) {
        case '1':
            return suggestedPatch.join('.');
        case '2':
            return suggestedMinor.join('.');
        case '3':
            return suggestedMajor.join('.');
        case '4':
            const customVersion = await askQuestion('üìù Nh·∫≠p version (x.y.z): ');
            if (!/^\d+\.\d+\.\d+$/.test(customVersion.trim())) {
                console.log('‚ùå Version kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng patch version.');
                return suggestedPatch.join('.');
            }
            return customVersion.trim();
        case '5':
            return currentVersion;
        default:
            console.log('üîÑ Ch·ªçn m·∫∑c ƒë·ªãnh: Patch version');
            return suggestedPatch.join('.');
    }
}

async function main() {
    const newVersion = await getNewVersion();
    const isVersionChanged = newVersion !== currentVersion;
    
    console.log(`\nüÜô ${isVersionChanged ? 'New' : 'Current'} Version: ${newVersion}`);
    
    if (isVersionChanged) {
        // C·∫≠p nh·∫≠t package.json v·ªõi version m·ªõi
        packageJson.version = newVersion;
        fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
        console.log('‚úÖ Updated package.json version');

        // C·∫≠p nh·∫≠t version.txt v·ªõi version m·ªõi
        fs.writeFileSync('version.txt', newVersion);
        console.log('‚úÖ Updated version.txt');
    }

    // C·∫≠p nh·∫≠t notes.txt v·ªõi version m·ªõi
    const currentDate = new Date().toLocaleDateString('vi-VN');
    const notesContent = `Chrome Manager v${newVersion} - ${currentDate}

üéâ T√çNH NƒÇNG V√Ä C·∫¢I TI·∫æN M·ªöI:
========================================

‚úÖ C·∫¨P NH·∫¨T PHI√äN B·∫¢N ${newVersion}:
‚Ä¢ C·∫£i thi·ªán hi·ªáu su·∫•t v√† ·ªïn ƒë·ªãnh qu·∫£n l√Ω Chrome
‚Ä¢ S·ª≠a l·ªói nh·ªè t·ª´ phi√™n b·∫£n tr∆∞·ªõc
‚Ä¢ T·ªëi ∆∞u h√≥a tr·∫£i nghi·ªám ng∆∞·ªùi d√πng
‚Ä¢ C·∫≠p nh·∫≠t th∆∞ vi·ªán b·∫£o m·∫≠t

üîß C·∫¢I THI·ªÜN H·ªÜ TH·ªêNG CHROME:
‚Ä¢ T·ª± ƒë·ªông backup Chrome profiles
‚Ä¢ C·∫£i thi·ªán kh·∫£ nƒÉng x·ª≠ l√Ω proxy errors
‚Ä¢ T·ªëi ∆∞u memory usage cho nhi·ªÅu profiles
‚Ä¢ N√¢ng cao t·ªëc ƒë·ªô kh·ªüi ƒë·ªông Chrome instances

üöÄ N√ÇNG C·∫§P EXTENSION MANAGEMENT:
‚Ä¢ Auto-install extensions improvements  
‚Ä¢ Better extension pinning system
‚Ä¢ Enhanced toolbar management
‚Ä¢ Performance optimizations

üìÖ Ng√†y ph√°t h√†nh: ${currentDate}
üè∑Ô∏è Phi√™n b·∫£n: ${newVersion}
üë®‚Äçüíª Ph√°t tri·ªÉn b·ªüi: Chrome Manager Team

üîó T·∫£i xu·ªëng t·∫°i: https://toolfb.vn/CHROME/
üìß H·ªó tr·ª£: support@chrome-manager.vn`;

    fs.writeFileSync('notes.txt', notesContent);
    console.log('‚úÖ Updated notes.txt');
    console.log('');

    if (isVersionChanged) {
        console.log('üîÑ B∆Ø·ªöC 1: GIT SYNCHRONIZATION');
        console.log('==============================');
        await gitSync(newVersion);
    }

    async function gitSync(version) {
        try {
            console.log('üì• Git: Adding all changes...');
            await runCommand('git add .');
            
            console.log(`üìù Git: Committing version ${version}...`);
            await runCommand(`git commit -m "üöÄ Release v${version} - Auto version bump"`);
            
            console.log('üè∑Ô∏è  Git: Creating tag...');
            await runCommand(`git tag -a v${version} -m "Release v${version}"`);
            
            console.log('‚¨ÜÔ∏è  Git: Pushing to GitHub...');
            await runCommand('git push origin master');
            
            console.log('üè∑Ô∏è  Git: Pushing tags...');
            await runCommand('git push origin --tags');
            
            console.log('‚úÖ Git synchronization completed!');
            console.log(`üîó GitHub: https://github.com/sondz20/QLCHOMRE/releases/tag/v${version}`);
        } catch (error) {
            console.warn('‚ö†Ô∏è  Git sync failed (continuing with build):', error.message);
        }
        console.log('');
    }

    async function autoBuildAndUpload() {
        try {
            console.log('üèóÔ∏è  B∆Ø·ªöC 2: BUILD APPLICATION');
            console.log('============================');
            
            // ƒê√≥ng c√°c Chrome Manager processes ƒëang ch·∫°y
            console.log('üîÑ ƒê√≥ng Chrome Manager processes...');
            try {
                await runCommand('taskkill /f /im "Chrome Manager - Qu·∫£n l√Ω Chrome Pro.exe" 2>nul || echo "No process found"');
            } catch (e) {
                // Ignore error
            }
            
            // X√≥a th∆∞ m·ª•c dist c≈© v·ªõi retry
            console.log('üßπ Cleaning old build...');
            for (let i = 0; i < 3; i++) {
                try {
                    if (fs.existsSync('dist')) {
                        fs.rmSync('dist', { recursive: true, force: true });
                    }
                    break;
                } catch (error) {
                    if (i === 2) throw error;
                    console.log(`‚è≥ Retry ${i + 1}/3...`);
                    await new Promise(resolve => setTimeout(resolve, 2000));
                }
            }
            
            // Build ·ª©ng d·ª•ng
            console.log('üî® Building Chrome Manager...');
            await runCommand('npm run build-only');
            
            console.log('');
            console.log('üìã B∆Ø·ªöC 3: KI·ªÇM TRA FILES');
            console.log('=========================');
            
            // Ki·ªÉm tra files
            let allFilesExist = true;
            for (const file of files) {
                if (fs.existsSync(file.local)) {
                    const stats = fs.statSync(file.local);
                    const sizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
                    console.log(`‚úÖ ${path.basename(file.local)} (${sizeInMB} MB)`);
                } else {
                    console.log(`‚ùå Thi·∫øu: ${file.local}`);
                    allFilesExist = false;
                }
            }
            
            if (!allFilesExist) {
                throw new Error('Thi·∫øu files c·∫ßn thi·∫øt sau khi build');
            }
            
            console.log('');
            console.log('üì§ B∆Ø·ªöC 4: UPLOAD TO SERVER');
            console.log('============================');
            
            // Upload l√™n server t·ª± ƒë·ªông
            await uploadToServer(newVersion);
            
            console.log('');
            console.log('üéä HO√ÄN TH√ÄNH T·∫§T C·∫¢!');
            console.log('=====================');
            console.log('‚ú® Build v√† upload th√†nh c√¥ng!');
            console.log(`üéØ Version ${newVersion} ƒë√£ s·∫µn s√†ng cho ng∆∞·ªùi d√πng`);
            
        } catch (error) {
            console.error('');
            console.error('‚ùå QU√Å TR√åNH TH·∫§T B·∫†I!');
            console.error('======================');
            console.error('L·ªói:', error.message);
            process.exit(1);
        } finally {
            rl.close();
        }
    }

    // Ch·∫°y qu√° tr√¨nh build v√† upload
    await autoBuildAndUpload();
}

// B·∫Øt ƒë·∫ßu qu√° tr√¨nh
main().catch(console.error);

// C·∫•u h√¨nh SFTP
const config = {
    host: '103.90.224.225',
    username: 'root',
    password: '4k9Ym61ZIhiAWx796YVn0mVK',
    port: 22
};

const remoteDir = '/www/wwwroot/toolfb.vn/public/CHROME/';

// Files c·∫ßn upload
const files = [
    {
        local: 'dist/Chrome-Manager-Setup.exe',
        remote: remoteDir + 'Chrome-Manager-Setup.exe'
    },
    {
        local: 'notes.txt', 
        remote: remoteDir + 'notes.txt'
    },
    {
        local: 'version.txt',
        remote: remoteDir + 'version.txt'
    }
];

function runCommand(command) {
    return new Promise((resolve, reject) => {
        console.log(`üîÑ Executing: ${command}`);
        exec(command, (error, stdout, stderr) => {
            if (error) {
                reject(error);
                return;
            }
            if (stdout) console.log(stdout);
            if (stderr) console.log(stderr);
            resolve();
        });
    });
}

async function uploadToServer(version) {
    const sftp = new Client();
    
    try {
        console.log('üîê K·∫øt n·ªëi ƒë·∫øn server Chrome Manager...');
        await sftp.connect(config);
        console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!');
        console.log('');
        
        // ƒê·∫£m b·∫£o th∆∞ m·ª•c remote t·ªìn t·∫°i
        try {
            await sftp.mkdir(remoteDir, true);
        } catch (error) {
            // Th∆∞ m·ª•c c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i
        }
        
        for (const file of files) {
            if (!fs.existsSync(file.local)) {
                console.log(`‚ùå File kh√¥ng t·ªìn t·∫°i: ${file.local}`);
                continue;
            }
            
            const stats = fs.statSync(file.local);
            const sizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
            
            console.log(`üì§ Uploading: ${path.basename(file.local)} (${sizeInMB} MB)`);
            
            await sftp.put(file.local, file.remote);
            console.log(`‚úÖ Uploaded: ${path.basename(file.remote)}`);
        }
        
        console.log('');
        console.log('üéâ UPLOAD HO√ÄN T·∫§T!');
        console.log('===================');
        console.log('‚úÖ T·∫•t c·∫£ files ƒë√£ ƒë∆∞·ª£c upload th√†nh c√¥ng');
        console.log(`üìã Version ${version} ƒë√£ s·∫µn s√†ng cho ng∆∞·ªùi d√πng`);
        console.log('');
        console.log('üîó Download URLs:');
        console.log(`   ‚Ä¢ https://toolfb.vn/CHROME/Chrome-Manager-Setup.exe`);
        console.log(`   ‚Ä¢ https://toolfb.vn/CHROME/notes.txt`);
        console.log(`   ‚Ä¢ https://toolfb.vn/CHROME/version.txt`);
        
    } catch (error) {
        console.error('‚ùå L·ªói upload:', error.message);
        throw error;
    } finally {
        await sftp.end();
    }
}
