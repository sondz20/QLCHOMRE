const { exec } = require('child_process');
const Client = require('ssh2-sftp-client');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Interface cho input t·ª´ user
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function askQuestion(question) {
    return new Promise((resolve) => {
        rl.question(question, (answer) => {
            resolve(answer);
        });
    });
}

console.log('üöÄ CHROME MANAGER - AUTO BUILD & RELEASE');
console.log('=========================================');
console.log('');

console.log('üî¢ B∆Ø·ªöC 0: VERSION MANAGEMENT');
console.log('=============================');

// ƒê·ªçc version hi·ªán t·∫°i
let packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
const currentVersion = packageJson.version;

console.log(`üìã Current Version: ${currentVersion}`);

// T·ª± ƒë·ªông t√≠nh to√°n version m·ªõi
const versionParts = currentVersion.split('.');
const suggestedPatch = versionParts.slice();
suggestedPatch[2] = (parseInt(suggestedPatch[2]) + 1).toString();

const suggestedMinor = versionParts.slice();
suggestedMinor[1] = (parseInt(suggestedMinor[1]) + 1).toString();
suggestedMinor[2] = '0';

const suggestedMajor = versionParts.slice();
suggestedMajor[0] = (parseInt(suggestedMajor[0]) + 1).toString();
suggestedMajor[1] = '0';
suggestedMajor[2] = '0';

console.log('');
console.log('üéØ Ch·ªçn lo·∫°i version bump:');
console.log(`   1. Patch (${suggestedPatch.join('.')}) - Bug fixes`);
console.log(`   2. Minor (${suggestedMinor.join('.')}) - New features`);
console.log(`   3. Major (${suggestedMajor.join('.')}) - Breaking changes`);
console.log(`   4. Custom - Nh·∫≠p version t√πy ch·ªânh`);
console.log(`   5. Skip - Gi·ªØ nguy√™n version hi·ªán t·∫°i`);

async function getNewVersion() {
    const choice = await askQuestion('\nüî¢ Ch·ªçn (1-5): ');
    
    switch(choice.trim()) {
        case '1':
            return suggestedPatch.join('.');
        case '2':
            return suggestedMinor.join('.');
        case '3':
            return suggestedMajor.join('.');
        case '4':
            const customVersion = await askQuestion('üìù Nh·∫≠p version (x.y.z): ');
            if (!/^\d+\.\d+\.\d+$/.test(customVersion.trim())) {
                console.log('‚ùå Version kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng patch version.');
                return suggestedPatch.join('.');
            }
            return customVersion.trim();
        case '5':
            return currentVersion;
        default:
            console.log('üîÑ Ch·ªçn m·∫∑c ƒë·ªãnh: Patch version');
            return suggestedPatch.join('.');
    }
}

async function main() {
    const newVersion = await getNewVersion();
    const isVersionChanged = newVersion !== currentVersion;
    
    console.log(`\nüÜô ${isVersionChanged ? 'New' : 'Current'} Version: ${newVersion}`);
    
    if (isVersionChanged) {
        // C·∫≠p nh·∫≠t package.json v·ªõi version m·ªõi
        packageJson.version = newVersion;
        fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));
        console.log('‚úÖ Updated package.json version');

        // C·∫≠p nh·∫≠t version.txt v·ªõi version m·ªõi
        fs.writeFileSync('version.txt', newVersion);
        console.log('‚úÖ Updated version.txt');
    }

    // C·∫≠p nh·∫≠t release notes
    const currentDate = new Date().toLocaleDateString('vi-VN');
    const notesContent = `Chrome Manager - Qu·∫£n l√Ω Chrome Pro v${newVersion}

üéâ T√çNH NƒÇNG M·ªöI V√Ä C·∫¢I TI·∫æN:
========================================

‚úÖ C·∫¨P NH·∫¨T PHI√äN B·∫¢N ${newVersion}:
‚Ä¢ Qu·∫£n l√Ω Chrome profiles m·ªôt c√°ch chuy√™n nghi·ªáp
‚Ä¢ T√≠ch h·ª£p proxy automation cho t·ª´ng profile
‚Ä¢ Auto-install v√† auto-pin Chrome extensions
‚Ä¢ Giao di·ªán ti·∫øng Vi·ªát th√¢n thi·ªán, d·ªÖ s·ª≠ d·ª•ng
‚Ä¢ B·∫£ng qu·∫£n l√Ω profile v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin

üîß T√çNH NƒÇNG CH√çNH:
‚Ä¢ ‚úÖ T·∫°o v√† qu·∫£n l√Ω Chrome profiles kh√¥ng gi·ªõi h·∫°n
‚Ä¢ üåê C·∫•u h√¨nh proxy cho t·ª´ng profile ri√™ng bi·ªát
‚Ä¢ üß© Qu·∫£n l√Ω extensions t·ª± ƒë·ªông
‚Ä¢ üìä Theo d√µi tr·∫°ng th√°i running profiles
‚Ä¢ ‚öôÔ∏è Settings v√† c·∫•u h√¨nh linh ho·∫°t

üöÄ C√îNG NGH·ªÜ:
‚Ä¢ Electron Desktop Application
‚Ä¢ Chrome DevTools Protocol integration
‚Ä¢ Puppeteer automation
‚Ä¢ Modern table-based UI design
‚Ä¢ Vietnamese localization

üìÖ Ng√†y ph√°t h√†nh: ${currentDate}
üè∑Ô∏è Phi√™n b·∫£n: ${newVersion}
üë®‚Äçüíª Ph√°t tri·ªÉn b·ªüi: Chrome Manager Team

üîó GitHub: https://github.com/sondz20/QLCHOMRE
üìß H·ªó tr·ª£: [Email h·ªó tr·ª£]`;

    fs.writeFileSync('release-notes.txt', notesContent);
    console.log('‚úÖ Updated release-notes.txt');
    console.log('');

    if (isVersionChanged) {
        console.log('üîÑ B∆Ø·ªöC 1: GIT SYNCHRONIZATION');
        console.log('==============================');
        await gitSync(newVersion);
    }

    await autoBuildProcess();
}

async function gitSync(version) {
    try {
        console.log('üì• Git: Adding all changes...');
        await runCommand('git add .');
        
        console.log(`üìù Git: Committing version ${version}...`);
        await runCommand(`git commit -m "üöÄ Release v${version} - Auto version bump"`);
        
        console.log('üè∑Ô∏è  Git: Creating tag...');
        await runCommand(`git tag -a v${version} -m "Release v${version}"`);
        
        console.log('‚¨ÜÔ∏è  Git: Pushing to GitHub...');
        await runCommand('git push origin master');
        
        console.log('üè∑Ô∏è  Git: Pushing tags...');
        await runCommand('git push origin --tags');
        
        console.log('‚úÖ Git synchronization completed!');
        console.log(`üîó GitHub: https://github.com/sondz20/QLCHOMRE/releases/tag/v${version}`);
    } catch (error) {
        console.warn('‚ö†Ô∏è  Git sync failed (continuing with build):', error.message);
    }
    console.log('');
}

async function autoBuildProcess() {
    try {
        console.log('üèóÔ∏è  B∆Ø·ªöC 2: BUILD APPLICATION');
        console.log('============================');
        
        // X√≥a th∆∞ m·ª•c dist c≈©
        if (fs.existsSync('dist')) {
            console.log('üóëÔ∏è  X√≥a th∆∞ m·ª•c dist c≈©...');
            fs.rmSync('dist', { recursive: true, force: true });
        }
        
        // Build ·ª©ng d·ª•ng
        console.log('üî® Building Electron application...');
        await runCommand('npm run build-only');
        
        console.log('');
        console.log('üìã B∆Ø·ªöC 3: KI·ªÇM TRA BUILD OUTPUT');
        console.log('================================');
        
        // Ki·ªÉm tra file build
        const expectedFiles = [
            'dist/Chrome-Manager-Setup.exe',
            'dist/win-unpacked/Chrome Manager - Qu·∫£n l√Ω Chrome Pro.exe'
        ];
        
        let allFilesExist = true;
        for (const file of expectedFiles) {
            if (fs.existsSync(file)) {
                const stats = fs.statSync(file);
                const sizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
                console.log(`‚úÖ ${path.basename(file)} (${sizeInMB} MB)`);
            } else {
                console.log(`‚ùå Thi·∫øu: ${file}`);
                allFilesExist = false;
            }
        }
        
        if (!allFilesExist) {
            throw new Error('M·ªôt s·ªë files build b·ªã thi·∫øu');
        }
        
        console.log('');
        console.log('üéä BUILD HO√ÄN TH√ÄNH!');
        console.log('====================');
        console.log('‚ú® Chrome Manager ƒë√£ ƒë∆∞·ª£c build th√†nh c√¥ng!');
        console.log('üìÅ Files output trong th∆∞ m·ª•c dist/');
        
        // H·ªèi user c√≥ mu·ªën upload kh√¥ng
        const shouldUpload = await askQuestion('\nüöÄ B·∫°n c√≥ mu·ªën upload l√™n server kh√¥ng? (y/n): ');
        
        if (shouldUpload.toLowerCase() === 'y' || shouldUpload.toLowerCase() === 'yes') {
            console.log('');
            console.log('ÔøΩ B∆Ø·ªöC 4: UPLOAD TO SERVER');
            console.log('============================');
            
            // Upload l√™n server  
            await uploadToServer(packageJson.version);
        } else {
            console.log('‚è≠Ô∏è  B·ªè qua upload - Files c√≥ s·∫µn trong th∆∞ m·ª•c dist/');
        }
        
        console.log('');
        console.log('üéâ QU√Å TR√åNH HO√ÄN T·∫§T!');
        console.log('======================');
        console.log('üöÄ Chrome Manager s·∫µn s√†ng cho distribution!');
        
        // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
        console.log('');
        console.log('üì¶ C√ÅC FILE ƒê∆Ø·ª¢C T·∫†O:');
        console.log('=====================');
        console.log('‚Ä¢ Chrome-Manager-Setup.exe - File c√†i ƒë·∫∑t cho end users');
        console.log('‚Ä¢ win-unpacked/ - Portable version');
        console.log('‚Ä¢ release-notes.txt - Ghi ch√∫ phi√™n b·∫£n');
        console.log('‚Ä¢ version.txt - File version ƒë·ªÉ auto-update');
        
    } catch (error) {
        console.error('');
        console.error('‚ùå BUILD TH·∫§T B·∫†I!');
        console.error('==================');
        console.error('L·ªói:', error.message);
        process.exit(1);
    } finally {
        rl.close();
    }
}

function runCommand(command) {
    return new Promise((resolve, reject) => {
        console.log(`üîÑ Executing: ${command}`);
        exec(command, (error, stdout, stderr) => {
            if (error) {
                reject(error);
                return;
            }
            if (stdout) console.log(stdout);
            if (stderr) console.log(stderr);
            resolve();
        });
    });
}

// ============== SFTP UPLOAD CONFIGURATION ==============
// TODO: C·∫≠p nh·∫≠t th√¥ng tin server c·ªßa b·∫°n
const serverConfig = {
    host: 'YOUR_SERVER_IP',           // VD: '103.90.224.225'
    username: 'YOUR_USERNAME',        // VD: 'root' 
    password: 'YOUR_PASSWORD',        // VD: 'your_password'
    port: 22
};

const remoteDir = '/path/to/your/releases/';  // VD: '/www/wwwroot/yoursite.com/public/releases/'

// Files s·∫Ω ƒë∆∞·ª£c upload
const uploadFiles = [
    {
        local: 'dist/Chrome-Manager-Setup.exe',
        remote: remoteDir + 'Chrome-Manager-Setup.exe'
    },
    {
        local: 'release-notes.txt', 
        remote: remoteDir + 'release-notes.txt'
    },
    {
        local: 'version.txt',
        remote: remoteDir + 'version.txt'
    }
];

async function uploadToServer(version) {
    // Ki·ªÉm tra c·∫•u h√¨nh server
    if (serverConfig.host === 'YOUR_SERVER_IP') {
        console.log('‚ö†Ô∏è  C·∫¢NH B√ÅO: Server ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh!');
        console.log('üìù H√£y c·∫≠p nh·∫≠t th√¥ng tin server trong auto-dist.js:');
        console.log('   - serverConfig.host');
        console.log('   - serverConfig.username'); 
        console.log('   - serverConfig.password');
        console.log('   - remoteDir');
        console.log('');
        console.log('üè† Files ƒë√£ s·∫µn s√†ng trong th∆∞ m·ª•c dist/ ƒë·ªÉ upload th·ªß c√¥ng');
        return;
    }

    const sftp = new Client();
    
    try {
        console.log('üîê K·∫øt n·ªëi ƒë·∫øn server...');
        await sftp.connect(serverConfig);
        console.log('‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!');
        console.log('');
        
        // ƒê·∫£m b·∫£o th∆∞ m·ª•c remote t·ªìn t·∫°i
        try {
            await sftp.mkdir(remoteDir, true);
        } catch (error) {
            // Th∆∞ m·ª•c c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i
        }
        
        for (const file of uploadFiles) {
            if (!fs.existsSync(file.local)) {
                console.log(`‚ùå File kh√¥ng t·ªìn t·∫°i: ${file.local}`);
                continue;
            }
            
            const stats = fs.statSync(file.local);
            const sizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
            
            console.log(`üì§ Uploading: ${path.basename(file.local)} (${sizeInMB} MB)`);
            
            await sftp.put(file.local, file.remote);
            console.log(`‚úÖ Uploaded: ${path.basename(file.remote)}`);
        }
        
        console.log('');
        console.log('üéâ UPLOAD HO√ÄN T·∫§T!');
        console.log('===================');
        console.log('‚úÖ T·∫•t c·∫£ files ƒë√£ ƒë∆∞·ª£c upload th√†nh c√¥ng');
        console.log(`üìã Version ${version} ƒë√£ s·∫µn s√†ng cho ng∆∞·ªùi d√πng`);
        console.log('');
        console.log('üîó Download URLs:');
        console.log(`   ‚Ä¢ https://yoursite.com/releases/Chrome-Manager-Setup.exe`);
        console.log(`   ‚Ä¢ https://yoursite.com/releases/release-notes.txt`);
        console.log(`   ‚Ä¢ https://yoursite.com/releases/version.txt`);
        
    } catch (error) {
        console.error('‚ùå L·ªói upload:', error.message);
        console.log('üí° Tip: Ki·ªÉm tra l·∫°i th√¥ng tin server config');
        throw error;
    } finally {
        await sftp.end();
    }
}

// B·∫Øt ƒë·∫ßu qu√° tr√¨nh
main().catch(console.error);
